@page "/draganddrop"
@inject IContentService ContentService;
@using BlazorBootstrap;

@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h3>DragAndDropContents</h3>

<SortableList TItem="Content" Data="Contents" Context="contentItem" OnUpdate="OnContentListUpdate">
    <ItemTemplate>
        <div class="row">
            <div class="col d-flex justify-content-end">
                
                <Button Color="ButtonColor.Warning" @onclick="() => OnShowEditContentModalClick(contentItem.ContentId)">Redigera</Button>
                <Button Color="ButtonColor.Danger" @onclick="() => OnShowDeleteContentModalClick(contentItem.ContentId)">Delete</Button>
            </div>
        </div>
        <div class="row">
            <ContentPreview ContentId="@contentItem.ContentId" @key="contentItem.ContentId" />
        </div>
    </ItemTemplate>
</SortableList>

@* edit modal content *@
<Modal @ref="editcontentmodal" Title="Edit Content">
    <BodyTemplate>
        @if (selectedContentId.HasValue)
        {
            <!-- Pass selectedContentId to the EditContent component or any other content editor -->
            <CascadingValue Value="selectedContentId.Value">
                <BlazorComponents.HtmlTemplates.EditContent/>
            </CascadingValue>
        }
        else
        {
            <p>No content selected.</p>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideEditContentModalClick">Close</Button>
    </FooterTemplate>
</Modal>

@* delete modal content *@
<Modal @ref="deletecontentmodal" Title="Delete Content">
    <BodyTemplate>
        @if (selectedContentId.HasValue)
        {
            <!-- Pass selectedContentId to the EditContent component or any other content editor -->
            <CascadingValue Value="selectedContentId.Value">
                <CMS.Components.Pages.ContentPages.Delete />
            </CascadingValue>
        }
        else
        {
            <p>No content selected.</p>
        }
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideDeleteContentModalClick">Close</Button>
    </FooterTemplate>
</Modal>




@code {
    [SupplyParameterFromQuery]
    public int? WebPageId { get; set; }

    private List<Content> Contents = new List<Content>();

    protected override async Task OnInitializedAsync()
    {
        if (WebPageId.HasValue)
        {
            // Fetch contents based on the WebPageId
            Contents = await ContentService.GetContentsByWebPageIdAsync(WebPageId.Value);
        }
    }

    private async Task OnContentListUpdate(SortableListEventArgs args)
    {
        // Validate indexes
        if (args.OldIndex < 0 || args.OldIndex >= Contents.Count || args.NewIndex < 0 || args.NewIndex >= Contents.Count)
            return;

        // Move the item in the Contents list
        var itemToMove = Contents[args.OldIndex];
        Contents.RemoveAt(args.OldIndex);

        if (args.NewIndex < Contents.Count)
        {
            Contents.Insert(args.NewIndex, itemToMove);
        }
        else
        {
            Contents.Add(itemToMove);
        }

        // Update order and save to the database
        await UpdateContentOrder();
        StateHasChanged();
    }

    private async Task UpdateContentOrder()
    {
        // Set order values based on new list arrangement
        for (int i = 0; i < Contents.Count; i++)
        {
            Contents[i].Order = i; // Assign order index
        }

        // Save the updated order in the database
        await ContentService.UpdateContentOrderAsync(Contents);
        StateHasChanged();
    }

    private int? selectedContentId;  // Holds the contentId for the selected item
    private Modal editcontentmodal, deletecontentmodal;             // Reference to the modal

    //edit conrtent modal
    private async Task OnShowEditContentModalClick(int contentId)
    {
        selectedContentId = contentId; // Set selected content ID
        await editcontentmodal.ShowAsync();       // Show the modal
    }

    private async Task OnHideEditContentModalClick()
    {
        await editcontentmodal.HideAsync();
        selectedContentId = null;      // Reset selected content ID when modal is closed

        // Force refresh by navigating to the same page
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    //delete content modal
    private async Task OnShowDeleteContentModalClick(int contentId)
    {
        selectedContentId = contentId; // Set selected content ID
        await deletecontentmodal.ShowAsync();       // Show the modal
    }

    private async Task OnHideDeleteContentModalClick()
    {
        await deletecontentmodal.HideAsync();
        selectedContentId = null;      // Reset selected content ID when modal is closed

        // Force refresh by navigating to the same page
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

}
